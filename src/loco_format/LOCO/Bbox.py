# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LOCO

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Bbox(object):
    __slots__ = ["_tab"]

    # Bbox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Bbox
    def X(self):
        return self._tab.Get(
            flatbuffers.number_types.Float32Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0),
        )

    # Bbox
    def Y(self):
        return self._tab.Get(
            flatbuffers.number_types.Float32Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4),
        )

    # Bbox
    def W(self):
        return self._tab.Get(
            flatbuffers.number_types.Float32Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8),
        )

    # Bbox
    def H(self):
        return self._tab.Get(
            flatbuffers.number_types.Float32Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12),
        )


def CreateBbox(builder, x, y, w, h):
    builder.Prep(4, 16)
    builder.PrependFloat32(h)
    builder.PrependFloat32(w)
    builder.PrependFloat32(y)
    builder.PrependFloat32(x)
    return builder.Offset()


class BboxT(object):
    # BboxT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.w = 0.0  # type: float
        self.h = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bbox = Bbox()
        bbox.Init(buf, pos)
        return cls.InitFromObj(bbox)

    @classmethod
    def InitFromObj(cls, bbox):
        x = BboxT()
        x._UnPack(bbox)
        return x

    # BboxT
    def _UnPack(self, bbox):
        if bbox is None:
            return
        self.x = bbox.X()
        self.y = bbox.Y()
        self.w = bbox.W()
        self.h = bbox.H()

    # BboxT
    def Pack(self, builder):
        return CreateBbox(builder, self.x, self.y, self.w, self.h)
