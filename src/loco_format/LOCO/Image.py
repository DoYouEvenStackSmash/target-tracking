# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LOCO

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Image(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsImage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Image()
        x.Init(buf, n + offset)
        return x

    # Image
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Image
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Image
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Image
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Image
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0


def ImageStart(builder):
    builder.StartObject(4)


def ImageAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)


def ImageAddFileName(builder, fileName):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0
    )


def ImageAddHeight(builder, height):
    builder.PrependInt32Slot(2, height, 0)


def ImageAddWidth(builder, width):
    builder.PrependInt32Slot(3, width, 0)


def ImageEnd(builder):
    return builder.EndObject()


class ImageT(object):
    # ImageT
    def __init__(self):
        self.id = 0  # type: int
        self.fileName = None  # type: str
        self.height = 0  # type: int
        self.width = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        image = Image()
        image.Init(buf, pos)
        return cls.InitFromObj(image)

    @classmethod
    def InitFromObj(cls, image):
        x = ImageT()
        x._UnPack(image)
        return x

    # ImageT
    def _UnPack(self, image):
        if image is None:
            return
        self.id = image.Id()
        self.fileName = image.FileName()
        self.height = image.Height()
        self.width = image.Width()

    # ImageT
    def Pack(self, builder):
        if self.fileName is not None:
            fileName = builder.CreateString(self.fileName)
        ImageStart(builder)
        ImageAddId(builder, self.id)
        if self.fileName is not None:
            ImageAddFileName(builder, fileName)
        ImageAddHeight(builder, self.height)
        ImageAddWidth(builder, self.width)
        image = ImageEnd(builder)
        return image
