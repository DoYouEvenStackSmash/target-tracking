# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LOCO

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Position(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsPosition(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Position()
        x.Init(buf, n + offset)
        return x

    # Position
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Position
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # Position
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # Position
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # Position
    def Theta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # Position
    def Phi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0


def PositionStart(builder):
    builder.StartObject(5)


def PositionAddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)


def PositionAddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)


def PositionAddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)


def PositionAddTheta(builder, theta):
    builder.PrependFloat32Slot(3, theta, 0.0)


def PositionAddPhi(builder, phi):
    builder.PrependFloat32Slot(4, phi, 0.0)


def PositionEnd(builder):
    return builder.EndObject()


class PositionT(object):
    # PositionT
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.theta = 0.0  # type: float
        self.phi = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        position = Position()
        position.Init(buf, pos)
        return cls.InitFromObj(position)

    @classmethod
    def InitFromObj(cls, position):
        x = PositionT()
        x._UnPack(position)
        return x

    # PositionT
    def _UnPack(self, position):
        if position is None:
            return
        self.x = position.X()
        self.y = position.Y()
        self.z = position.Z()
        self.theta = position.Theta()
        self.phi = position.Phi()

    # PositionT
    def Pack(self, builder):
        PositionStart(builder)
        PositionAddX(builder, self.x)
        PositionAddY(builder, self.y)
        PositionAddZ(builder, self.z)
        PositionAddTheta(builder, self.theta)
        PositionAddPhi(builder, self.phi)
        position = PositionEnd(builder)
        return position
