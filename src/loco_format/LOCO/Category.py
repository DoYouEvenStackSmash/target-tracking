# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LOCO

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Category(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsCategory(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Category()
        x.Init(buf, n + offset)
        return x

    # Category
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Category
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Category
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Category
    def Supercategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def CategoryStart(builder):
    builder.StartObject(3)


def CategoryAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)


def CategoryAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0
    )


def CategoryAddSupercategory(builder, supercategory):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(supercategory), 0
    )


def CategoryEnd(builder):
    return builder.EndObject()


class CategoryT(object):
    # CategoryT
    def __init__(self):
        self.id = 0  # type: int
        self.name = None  # type: str
        self.supercategory = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        category = Category()
        category.Init(buf, pos)
        return cls.InitFromObj(category)

    @classmethod
    def InitFromObj(cls, category):
        x = CategoryT()
        x._UnPack(category)
        return x

    # CategoryT
    def _UnPack(self, category):
        if category is None:
            return
        self.id = category.Id()
        self.name = category.Name()
        self.supercategory = category.Supercategory()

    # CategoryT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.supercategory is not None:
            supercategory = builder.CreateString(self.supercategory)
        CategoryStart(builder)
        CategoryAddId(builder, self.id)
        if self.name is not None:
            CategoryAddName(builder, name)
        if self.supercategory is not None:
            CategoryAddSupercategory(builder, supercategory)
        category = CategoryEnd(builder)
        return category
