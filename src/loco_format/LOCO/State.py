# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LOCO

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class State(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsState(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State()
        x.Init(buf, n + offset)
        return x

    # State
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from LOCO.Position import Position

            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def Orientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags, o + self._tab.Pos
            )
        return 0.0

    # State
    def TimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0


def StateStart(builder):
    builder.StartObject(3)


def StateAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0
    )


def StateAddOrientation(builder, orientation):
    builder.PrependFloat32Slot(1, orientation, 0.0)


def StateAddTimeStamp(builder, timeStamp):
    builder.PrependInt32Slot(2, timeStamp, 0)


def StateEnd(builder):
    return builder.EndObject()


import LOCO.Position

try:
    from typing import Optional
except:
    pass


class StateT(object):
    # StateT
    def __init__(self):
        self.position = None  # type: Optional[LOCO.Position.PositionT]
        self.orientation = 0.0  # type: float
        self.timeStamp = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        state = State()
        state.Init(buf, pos)
        return cls.InitFromObj(state)

    @classmethod
    def InitFromObj(cls, state):
        x = StateT()
        x._UnPack(state)
        return x

    # StateT
    def _UnPack(self, state):
        if state is None:
            return
        if state.Position() is not None:
            self.position = LOCO.Position.PositionT.InitFromObj(state.Position())
        self.orientation = state.Orientation()
        self.timeStamp = state.TimeStamp()

    # StateT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        StateStart(builder)
        if self.position is not None:
            StateAddPosition(builder, position)
        StateAddOrientation(builder, self.orientation)
        StateAddTimeStamp(builder, self.timeStamp)
        state = StateEnd(builder)
        return state
